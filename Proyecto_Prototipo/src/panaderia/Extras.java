package panaderia;

import panaderia.Conexion;
import com.mongodb.DB;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.result.DeleteResult;
import com.mongodb.client.result.DeleteResult;
import com.mongodb.client.result.UpdateResult;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.bson.Document;
import org.bson.types.ObjectId;
import panaderia.Conexion;




/**
 *
 * @author PIPE
 */
public class Extras extends javax.swing.JFrame {
Conexion conn = new Conexion();
    MongoDatabase database;
    DB db;
    int filaSeleccionada = -1;
    /**
     * Creates new form Extras
     */
    public Extras() {
        if (conn != null) {
            conn = conn.crearConexion();
            database = conn.getDataB();
        }
        initComponents();
        txtId.setVisible(false);
        mostrarDatosTabla();
    }
    private void mostrarDatosTabla() {
    DefaultTableModel modeloTabla = (DefaultTableModel) tblExtras.getModel();
    modeloTabla.setRowCount(0);

    MongoCollection<Document> collection = database.getCollection("extras");
    FindIterable<Document> documents = collection.find();

    for (Document document : documents) {
        Object id = document.get("_id");
        String marca = document.getString("marca");
        String producto = document.getString("producto"); 
        double precio = redondearDosDecimales(document.getDouble("precio"));
        int cantidad = document.getInteger("cantidad");
        double total = redondearDosDecimales(document.getDouble("total_cancelar"));
        
        String fechaStr = document.getString("fecha_pago");
        SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
        
        Date fecha = null;
        try {
            fecha = formatoFecha.parse(fechaStr);
        } catch (ParseException e) {
            
            e.printStackTrace();
        }

       

        modeloTabla.addRow(new Object[]{id, marca, producto, precio, cantidad, total, fechaStr});
    }

    TableColumnModel columnModel = tblExtras.getColumnModel();
    TableColumn columna = columnModel.getColumn(0);
    columna.setMinWidth(0);
    columna.setMaxWidth(0);
}





private double redondearDosDecimales(double valor) {
    return Math.round(valor * 100.0) / 100.0;
}


private void mostrarCampos() {
    filaSeleccionada = tblExtras.getSelectedRow();
    if (filaSeleccionada == -1) {
        return;
    }

    DefaultTableModel modeloTabla = (DefaultTableModel) tblExtras.getModel();
    txtId.setText(modeloTabla.getValueAt(filaSeleccionada, 0).toString());
    txtMarca.setText(modeloTabla.getValueAt(filaSeleccionada, 1).toString());
    txtProducto.setText(modeloTabla.getValueAt(filaSeleccionada, 2).toString());
    txtPrecioUnit.setText(modeloTabla.getValueAt(filaSeleccionada, 3).toString());
    spCantidad.setValue(modeloTabla.getValueAt(filaSeleccionada, 4));
    txtTotal.setText(modeloTabla.getValueAt(filaSeleccionada, 5).toString());

    Object fechaObj = modeloTabla.getValueAt(filaSeleccionada, 6);
    if (fechaObj != null) {
   
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date fecha = dateFormat.parse(fechaObj.toString());
            calendario.setDate(fecha);
        } catch (ParseException e) {
            e.printStackTrace(); 
        }
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        spCantidad = new javax.swing.JSpinner();
        btnLimpiar = new javax.swing.JButton();
        btnAceptar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        txtProducto = new javax.swing.JTextField();
        btnguardar = new javax.swing.JButton();
        txtId = new javax.swing.JTextField();
        btnActualizar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnEliminar = new javax.swing.JButton();
        txtTotal = new javax.swing.JTextField();
        calendario = new com.toedter.calendar.JDateChooser();
        btnCalcular = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtPrecioUnit = new javax.swing.JTextField();
        txtMarca = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblExtras = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Cantidad");

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        jLabel2.setText("Producto");

        btnCancelar.setText("Cancelar");

        txtProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtProductoKeyTyped(evt);
            }
        });

        btnguardar.setText("Guardar");
        btnguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnguardarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        jLabel3.setText("Total");

        btnEliminar.setText("Eliminar");
        btnEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEliminarMouseClicked(evt);
            }
        });
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnCalcular.setText("Calcular");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        jLabel5.setText("Fecha de pago");

        jLabel4.setText("Precio Unit");

        jLabel7.setText("Marca");

        txtPrecioUnit.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtPrecioUnitPropertyChange(evt);
            }
        });

        tblExtras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Marca", "Productos", "Precio", "cantidad", "Total a cancelar", "Fecha de pago"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblExtras);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(txtProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(35, 35, 35)
                                    .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtPrecioUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnCalcular)
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(80, 80, 80)
                                                .addComponent(spCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel1))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(calendario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(btnguardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnActualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimpiar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(btnAceptar)
                        .addGap(60, 60, 60)
                        .addComponent(btnCancelar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtPrecioUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(spCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnCalcular)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(calendario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnguardar)
                    .addComponent(btnActualizar)
                    .addComponent(btnEliminar)
                    .addComponent(btnLimpiar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAceptar)
                    .addComponent(btnCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void txtProductoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProductoKeyTyped
        char validacion = evt.getKeyChar();
        if (Character.isDigit(validacion)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "imprimir solo letras");
        }
    }//GEN-LAST:event_txtProductoKeyTyped

    private void btnguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnguardarActionPerformed
        MongoCollection<Document> coleccion = database.getCollection("extras");

        String producto = txtProducto.getText();
        String marca = txtMarca.getText();
        float precio = 0.0f;
        int cantidad = 0;
        float totalCancelar = 0.0f;
        Date fechaPago;

        try {
            precio = Float.parseFloat(txtPrecioUnit.getText().replace(",", "."));
            cantidad = (int) spCantidad.getValue();
            totalCancelar = Float.parseFloat(txtTotal.getText().replace(",", "."));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error en el formato de los campos.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Date fechaSeleccionada = calendario.getDate();

        if (fechaSeleccionada == null) {
            JOptionPane.showMessageDialog(this, "Seleccione una fecha válida.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        SimpleDateFormat formatoFecha = new SimpleDateFormat("dd MMM yyyy");
        String fechaFormateada = formatoFecha.format(fechaSeleccionada);

        Document documento = new Document("marca", marca)
        .append("producto", producto)
        .append("precio", precio)
        .append("cantidad", cantidad)
        .append("total_cancelar", totalCancelar)
        .append("fecha_pago", fechaFormateada);

        coleccion.insertOne(documento);
        mostrarDatosTabla();
    }//GEN-LAST:event_btnguardarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed

        MongoCollection<Document> coleccion = database.getCollection("extras");

        String marca = txtMarca.getText(); // Obtener el texto del campo de texto
        float precio = 0.0f;
        int cantidad = (int) spCantidad.getValue(); // Obtener el valor del spinner
        float totalCancelar = 0.0f; // No estás utilizando este valor en el documento
        Date fechaPago;

        try {
            precio = Float.parseFloat(txtPrecioUnit.getText().replace(",", "."));
            totalCancelar = Float.parseFloat(txtTotal.getText().replace(",", ".")); // Utilizar el valor de txtTotal
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error en el formato de los campos.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        fechaPago = new Date();

        SimpleDateFormat formatoFecha = new SimpleDateFormat("dd MMM yyyy", new Locale("es", "ES"));
        String fechaFormateada = formatoFecha.format(fechaPago);

        Document documento = new Document("marca", marca)
        .append("precio", precio)
        .append("cantidad", cantidad)
        .append("total_cancelar", totalCancelar)
        .append("fecha_pago", fechaFormateada);

        coleccion.insertOne(documento);
        mostrarDatosTabla();
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarMouseClicked
        mostrarCampos();
        btnguardar.setVisible(false);
    }//GEN-LAST:event_btnEliminarMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        MongoCollection<Document> coleccion = database.getCollection("extras");

        String marca = txtMarca.getText(); // Obtener el texto del campo de texto
        float precio = 0.0f;
        int cantidad = (int) spCantidad.getValue(); // Obtener el valor del spinner
        float totalCancelar = 0.0f; // No estás utilizando este valor en el documento
        Date fechaPago;

        try {
            precio = Float.parseFloat(txtPrecioUnit.getText().replace(",", "."));
            totalCancelar = Float.parseFloat(txtTotal.getText().replace(",", ".")); // Utilizar el valor de txtTotal
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error en el formato de los campos.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        fechaPago = new Date();

        // Formatear la fecha al estilo "día mes año"
        SimpleDateFormat formatoFecha = new SimpleDateFormat("dd MMM yyyy", new Locale("es", "ES"));
        String fechaFormateada = formatoFecha.format(fechaPago);

        // Obtener el ID del documento seleccionado
        String id = tblExtras.getValueAt(filaSeleccionada, 0).toString();
        // Crear el filtro para actualizar el documento específico
        Document filtro = new Document("_id", new ObjectId(id));
        // Crear el documento con los nuevos valores
        Document documento = new Document("marca", marca)
        .append("precio", precio)
        .append("cantidad", cantidad)
        .append("total_cancelar", totalCancelar) // Agregar el totalCancelar al documento
        .append("fecha_pago", fechaFormateada);

        // Realizar la actualización del documento
        UpdateResult result = coleccion.updateOne(filtro, new Document("$set", documento));
        mostrarDatosTabla();

        if (result.getModifiedCount() > 0) {
            JOptionPane.showMessageDialog(null, "Documento actualizado correctamente");
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró el documento para actualizar");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        calcularPrecio();
    }//GEN-LAST:event_btnCalcularActionPerformed

    private void txtPrecioUnitPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtPrecioUnitPropertyChange
        calcularPrecio();
    }//GEN-LAST:event_txtPrecioUnitPropertyChange

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
     
      abrirPrincipal();
    
        
    }//GEN-LAST:event_btnAceptarActionPerformed

   private void abrirPrincipal(){
   Principal newframe = new Principal();
        newframe.setVisible(true);
        this.dispose();
   }
    private void limpiar() {
        txtProducto.setText("");
        txtMarca.setText("");
        spCantidad.setValue(0);
        txtPrecioUnit.setText("");   
        txtTotal.setText("");
        calendario.setDate(null);
    }
private void guardarPrecioUnitarioEnArchivo(double precioUnitario) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("txtPrecioUnitario.txt"))) {
            writer.write(String.valueOf(precioUnitario));
        } catch (IOException e) {
            e.printStackTrace();

        }
    }
 private void calcularPrecio() {
    int cantidad = (int) spCantidad.getValue();
    double precioUnitario = 0;

    // Obtener el precio unitario desde el campo de texto
    try {
        precioUnitario = Double.parseDouble(txtPrecioUnit.getText());
    } catch (NumberFormatException e) {
        // Manejar la excepción si el formato no es válido
        System.out.println("Error: Formato de precio unitario no válido");
        return;
    }

    // Mostrar el precio unitario en el campo correspondiente
    txtPrecioUnit.setText(String.format("%.2f", precioUnitario));

    // Calcular el precio total
    double precioTotal = cantidad * precioUnitario;

    // Mostrar el precio total en el campo correspondiente
    txtTotal.setText(String.format("%.2f", precioTotal));

    // Guardar el precio unitario en un archivo (o realizar la lógica necesaria)
    guardarPrecioUnitarioEnArchivo(precioUnitario);
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Extras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Extras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Extras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Extras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Extras().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnguardar;
    private com.toedter.calendar.JDateChooser calendario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spCantidad;
    private javax.swing.JTable tblExtras;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtMarca;
    private javax.swing.JTextField txtPrecioUnit;
    private javax.swing.JTextField txtProducto;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
