package panaderia;

import com.mongodb.DB;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.result.DeleteResult;
import com.mongodb.client.result.DeleteResult;
import com.mongodb.client.result.UpdateResult;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.bson.Document;
import org.bson.types.ObjectId;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author PIPE
 */
public class Pedidos extends javax.swing.JFrame {

    Conexion conn = new Conexion();
    MongoDatabase database;
    DB db;
    int filaSeleccionada = -1;

    public Pedidos() {
        if (conn != null) {
            conn = conn.crearConexion();
            database = conn.getDataB();
        }
        initComponents();
        txtId.setVisible(false);
        mostrarDatosTabla();
        
    }
    
    private void mostrarDatosTabla() {
    DefaultTableModel modeloTabla = (DefaultTableModel) tblPedidos.getModel();
    modeloTabla.setRowCount(0);

    MongoCollection<Document> collection = database.getCollection("pedidos");
    FindIterable<Document> documents = collection.find();

    for (Document document : documents) {
        Object id = document.get("_id");
        String producto = document.getString("producto");
        double precio = redondearDosDecimales(document.getDouble("precio"));
        int cantidad = document.getInteger("cantidad");
        double total = redondearDosDecimales(document.getDouble("total"));

        modeloTabla.addRow(new Object[]{id, producto, precio, cantidad, total});
    }

    TableColumnModel columnModel = tblPedidos.getColumnModel();
    TableColumn columna = columnModel.getColumn(0);
    columna.setMinWidth(0);
    columna.setMaxWidth(0);
}
    private double redondearDosDecimales(double valor) {
    return Math.round(valor * 100.0) / 100.0;
}
private void mostrarCampos() {
    filaSeleccionada = tblPedidos.getSelectedRow();
    
    if (filaSeleccionada == -1) {
        return;
    }

    DefaultTableModel modeloTabla = (DefaultTableModel) tblPedidos.getModel();

  
    if (modeloTabla.getColumnCount() < 5) {
       
        return;
    }

    txtId.setText(modeloTabla.getValueAt(filaSeleccionada, 0).toString());
    
  
    Object valorProducto = modeloTabla.getValueAt(filaSeleccionada, 1);
    if (valorProducto != null) {
        cmbProductos.setSelectedItem(valorProducto.toString());
    } else {
        cmbProductos.setSelectedItem(null);
    }

    txtPrecioUnit.setText(modeloTabla.getValueAt(filaSeleccionada, 2).toString());

   
    Object valorCantidad = modeloTabla.getValueAt(filaSeleccionada, 3);
    if (valorCantidad != null) {
        spCantidad.setValue(valorCantidad);
    }


    if (modeloTabla.getColumnCount() >= 5) {
        txtTotal.setText(modeloTabla.getValueAt(filaSeleccionada, 4).toString());
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        spCantidad = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPedidos = new javax.swing.JTable();
        txtTotal = new javax.swing.JTextField();
        btnCalcular = new javax.swing.JButton();
        btnAceptar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        txtPrecioUnit = new javax.swing.JTextField();
        btnguardar = new javax.swing.JButton();
        cmbProductos = new javax.swing.JComboBox<>();
        btnEliminar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Producto");

        jLabel1.setText("Cantidad");

        jLabel3.setText("Total");

        tblPedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Producto", "Precio", "Cantidad", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPedidos);

        btnCalcular.setText("Calcular");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        jLabel4.setText("Precio Unit");

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        txtPrecioUnit.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtPrecioUnitPropertyChange(evt);
            }
        });

        btnguardar.setText("Guardar");
        btnguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnguardarActionPerformed(evt);
            }
        });

        cmbProductos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elegir...", "huevo", "leche", "jamon", "pan ", "dona", "pastel" }));
        cmbProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProductosActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEliminarMouseClicked(evt);
            }
        });
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCalcular)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(115, 115, 115)))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPrecioUnit))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(24, 24, 24)
                                .addComponent(spCantidad))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(btnAceptar)
                                .addGap(60, 60, 60)
                                .addComponent(btnCancelar))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnguardar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnActualizar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEliminar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLimpiar)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(spCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPrecioUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCalcular)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnguardar)
                    .addComponent(btnActualizar)
                    .addComponent(btnEliminar)
                    .addComponent(btnLimpiar))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAceptar)
                    .addComponent(btnCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        calcularPrecio();
    }//GEN-LAST:event_btnCalcularActionPerformed

    private void txtPrecioUnitPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtPrecioUnitPropertyChange
        calcularPrecio();
    }//GEN-LAST:event_txtPrecioUnitPropertyChange

    private void btnguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnguardarActionPerformed
        MongoCollection coleccion = database.getCollection("pedidos");

        // Obtener los valores de los campos
        String producto = (String) cmbProductos.getSelectedItem();
        float precio = 0.0f;
        int cantidad = 0;
        float total = 0.0f;

        try {
            precio = Float.parseFloat(txtPrecioUnit.getText().replace(",", "."));
            cantidad = (int) spCantidad.getValue();
            total = Float.parseFloat(txtTotal.getText().replace(",", "."));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error en el formato de los campos.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método si hay un error de formato
        }

        // Crear el documento con los valores convertidos
        Document documento = new Document("producto", producto)
        .append("precio", precio)
        .append("cantidad", cantidad)
        .append("total", total);

        // Insertar el documento en la colección
        coleccion.insertOne(documento);

        // Actualizar la tabla
        mostrarDatosTabla();
    }//GEN-LAST:event_btnguardarActionPerformed

    private void cmbProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProductosActionPerformed
        double precio = 0.0; // Declaración y definición inicial de la variable precio

        String seleccion = (String) cmbProductos.getSelectedItem();

        if (seleccion.equals("huevo")) {
            precio = 0.15;
        } else if (seleccion.equals("leche")) {
            precio = 0.90;
        } else if (seleccion.equals("cafe")) {
            precio = 0.35;
        } else if (seleccion.equals("jamon")) {
            precio = 0.80;
        } else if (seleccion.equals("pan")) {
            precio = 0.15;
        } else if (seleccion.equals("dona")) {
            precio = 0.50;
        } else if (seleccion.equals("pastel")) {
            precio = 5.00;
        }

        // Ahora puedes usar la variable precio según tus necesidades

    }//GEN-LAST:event_cmbProductosActionPerformed

    private void btnEliminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarMouseClicked
        mostrarCampos();
        btnguardar.setVisible(false);
    }//GEN-LAST:event_btnEliminarMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (filaSeleccionada >= 0) {
            int confirmacion = JOptionPane.showConfirmDialog(null, "Seguro de eliminar los datos?", "Confirmacion", JOptionPane.YES_NO_OPTION);
            if (confirmacion == JOptionPane.YES_OPTION) {
                DefaultTableModel modeloTabla = (DefaultTableModel) tblPedidos.getModel();
                MongoCollection coleccion = database.getCollection("panaderia");
                Document filtro = new Document("_id", new ObjectId(txtId.getText()));
                DeleteResult result = coleccion.deleteOne(filtro);

                if (result.getDeletedCount() > 0) {
                    JOptionPane.showMessageDialog(null, "Registro eliminado Correctamente");
                    modeloTabla.removeRow(filaSeleccionada);
                } else {
                    JOptionPane.showMessageDialog(null, "No se encontro el registro para eliminarlo");

                }
            } else {
                ListSelectionModel seleccionModel = tblPedidos.getSelectionModel();
                seleccionModel.clearSelection();
                filaSeleccionada = -1;

            }
            limpiar();
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un registro para eliminar");
        }

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed

        if (filaSeleccionada >= 0) {
            int confirmacion = JOptionPane.showConfirmDialog(null, "Seguro de Actualizar los datos?", "Confirmar Actualizacion", JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                MongoCollection coleccion = database.getCollection("pedidos");

                Document filtro = new Document("_id", new ObjectId(txtId.getText()));
                Document documento = new Document("$set", new Document()
                    .append("producto", cmbProductos.getSelectedItem())
                    .append("precio", txtPrecioUnit.getText())
                    .append("cantidad", (Integer) (spCantidad.getValue()))
                    .append("total", txtTotal));

                UpdateResult result = coleccion.updateOne(filtro, documento);
                mostrarDatosTabla();
                if (result.getModifiedCount() > 0) {
                    JOptionPane.showMessageDialog(null, "Documento actualizado correctamente");
                } else {
                    JOptionPane.showConfirmDialog(null, "No se encontro el documento para actualizar");
                }
            } else {
                ListSelectionModel seleccionModel = tblPedidos.getSelectionModel();
                seleccionModel.clearSelection();
                filaSeleccionada = -1;
            }
        } else {
            JOptionPane.showConfirmDialog(null, "Seleccione el registro a Actualizar");
        }
        limpiar();
        btnguardar.setVisible(true);
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        abrirPrincipal();
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        JOptionPane.showMessageDialog(null, "Pedido cancelado");
            Principal newframe = new Principal();
            newframe.setVisible(true);
            this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void abrirPrincipal(){
   Principal newframe = new Principal();
        newframe.setVisible(true);
        this.dispose();
   }
    private void calcularPrecio() {
    int cantidad = (int) spCantidad.getValue();
    double precioUnitario = 0;

    String producto = cmbProductos.getSelectedItem().toString();

    // Asignación de precios basados en la selección del combo box
    if (producto.equals("huevo")) {
        precioUnitario = 0.15;
    } else if (producto.equals("leche")) {
        precioUnitario = 0.90;
    } else if (producto.equals("cafe")) {
        precioUnitario = 0.35;
    } else if (producto.equals("jamon")) {
        precioUnitario = 0.80;
    } else if (producto.equals("pan")) {
        precioUnitario = 0.15;
    } else if (producto.equals("dona")) {
        precioUnitario = 0.50;
    } else if (producto.equals("pastel")) {
        precioUnitario = 5.00;
    }

    txtPrecioUnit.setText(String.format("%.2f", precioUnitario));

    double precioTotal = cantidad * precioUnitario;

    txtTotal.setText(String.format("%.2f", precioTotal));

    // No estoy seguro de qué hace este método, pero asumo que es correcto
    guardarPrecioUnitarioEnArchivo(precioUnitario);
}



    private void guardarPrecioUnitarioEnArchivo(double precioUnitario) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("txtPrecioUnitario.txt"))) {
            writer.write(String.valueOf(precioUnitario));
        } catch (IOException e) {
            e.printStackTrace();

        }
    }

    public boolean verificarProducto(String producto) {
        MongoCollection<Document> coleccion = database.getCollection("Productos");
        Document filtro = new Document("Producto", producto);
        double precio = 0;
        MongoCursor<Document> cursor = coleccion.find(filtro).iterator();

        if (cursor.hasNext()) {
            return true;
        } else {
            return false;
        }

    }

    private void limpiar() {
        cmbProductos.setSelectedIndex(0);
        spCantidad.setValue(0);
        txtPrecioUnit.setText("");   
        txtTotal.setText("");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pedidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pedidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pedidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pedidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pedidos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnguardar;
    private javax.swing.JComboBox<String> cmbProductos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spCantidad;
    private javax.swing.JTable tblPedidos;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtPrecioUnit;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
